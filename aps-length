#!/usr/bin/env python

"""
Count length of an APS manuscript formatted in LaTeX, following
guidelines described at http://journals.aps.org/authors/length-guide

Copyright (c) James Kermode <james.kermode@gmail.com> 2014

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
"""

import glob
import optparse
import sys
import subprocess

word_limit = {'PRL': 3500,
              'PRA-RC': 3500,
              'PRB-RC': 3500,
              'PRC-RC': 4500,
              'PRD-RC': 4000,
              'PRE-RC': 3500,
              'PRApplied': 3500,
              'PRST-PER': 3500}

def is_first_line(line):
    if line.strip() == '':
        return False
    if '%' in line:
        return False
    return True

def count_main_text_words(detex_lines, tex_lines):
    # remove images and empty lines
    detex_lines = [line for line in detex_lines if len(line.strip()) > 0]
    detex_lines = [line for line in detex_lines if '<Picture' not in line]
    
    title_line_no, = [i for i, line in enumerate(tex_lines) if '\maketitle' in line]
    first_line_no = title_line_no + 1
    while not is_first_line(tex_lines[first_line_no]):
        first_line_no += 1
    first_line = tex_lines[first_line_no]

    detex_first_line_no = 0
    for line in detex_lines:
        if line.strip() == first_line.strip():
            break
        detex_first_line_no += 1

    main_text = detex_lines[detex_first_line_no:]

    print 'START main text'
    print '\n'.join(main_text)
    print 'END main text'

    main_text = [line.replace('-', ' ') for line in main_text ] # hyphenated words count as two words
    lines_words = [line.split() for line in main_text]
    words = [word for words in lines_words for word in words ]

    words_file = open('words', 'w')
    words_file.writelines([word+'\n' for word in words])
    words_file.close()
    main_text_words = len(words)
    return main_text_words


def find_equation_lines(tex_lines):
    return [i for (i, line) in enumerate(tex_lines) if (r'\begin{equation' in line or
                                                        r'\begin{eqnarray' in line or
                                                        r'\begin{align' in line or
                                                        r'\begin{displaymath' in line)]
def count_equation_words(lines, start_line):
    count = 1
    array = False
    array_lines = 0
    two_column = '*' in lines[start_line]
    if two_column:
        eqn_words_per_line = 32
    else:
        eqn_words_per_line = 16
        
    for line in lines[start_line+1:]:
        if (r'\end{equation' in line or
            r'\end{eqnarray' in line or
            r'\end{align' in line or
            r'\end{displaymath' in line):
            break
        if r'\\' in line:
            if not array:
                count += 1
            else:
                array_lines += 1
        if r'\begin{array}' in line:
            array = True
            array_lines = 0            
        if r'\end{array}' in line:
            array = False

    if array_lines != 0:
        count *= array_lines
            
    return count*eqn_words_per_line

def count_equations_words(tex_lines):
    eqn_line_nos = find_equation_lines(tex_lines)
    eqn_words = [count_equation_words(tex_lines, eqn_line_no) for eqn_line_no in eqn_line_nos]
    print 'Equations: %r' % eqn_words
    return sum(eqn_words)

def find_table_lines(tex_lines):
    return [i for (i, line) in enumerate(tex_lines) if r'\begin{tabl' in line]

def count_table_words(tex_lines, table_line):
    two_column = 'table*' in tex_lines[table_line]
    count = 1
    for line in tex_lines[table_line:]:
        if r'\end{table' in line:
            break
        if r'\\' in line:
            count += 1
    if two_column:
        print 'Two-column table with %d lines' % count
        return int(13.*count + 26.)
    else:
        print 'Single-column table with %d lines' % count
        return int(6.5*count + 13.)

def count_tables_words(tex_lines):
    table_lines = find_table_lines(tex_lines)
    table_words = [ count_table_words(tex_lines, table_line) for table_line in table_lines ]
    print 'Tables: %r' % table_words
    return sum(table_words)


def count_figures_words(detex_lines, tex_lines, opts):
    if opts.var is None:
        tex_vars = {}
    else:
        tex_vars = dict(opts.var)
        
    fig_lines = [line for line in detex_lines if '<Picture' in line ]
    fig_words = []
    #figs = {}
    
    for fig_i, fig_line in enumerate(fig_lines):
        filename = fig_line.strip()[1:-1].split()[1]
        this_fig_lines = [ (i, line) for i, line in enumerate(tex_lines) if filename in line and
                           ('input' in line or 'includegraphics' in line)]
        (inc_fig_line_no, inc_fig_line), = this_fig_lines
        fig_line_no = inc_fig_line_no
        while r'\begin{figure' not in tex_lines[fig_line_no]:
            fig_line_no -= 1
        two_column = 'figure*' in tex_lines[fig_line_no]

        subfig = 'subfloat' in tex_lines[inc_fig_line_no]
        newline = r'\\' in tex_lines[inc_fig_line_no]

        #print filename, tex_lines[inc_fig_line_no], tex_lines[fig_line_no]
        
        for key in tex_vars.keys():
            if key in filename:
                filename = filename.replace(key, tex_vars[key])

        for ext in ['', '.pdf', '.eps', '.png']:
            if len(glob.glob(filename+ext)) == 1:
                break
        else:
            raise IOError('missing picture file %s' % filename)
        filename = filename+ext

        if opts.figs == 'identify':
            identify = subprocess.Popen(['identify', filename],
                                        stdout=subprocess.PIPE)
            out, err = identify.communicate()
            fields = out.split()
            width, height = fields[2].split('x')
            width = float(width)
            height = float(height)
        elif opts.figs == 'gs':
            img_f = open(filename, 'r')
            gs = subprocess.Popen(['gs', '-q', '-dSAFER', '-dBATCH', '-sDEVICE=bbox', '-'],
                                  stdin=img_f, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = gs.communicate()
            img_f.close()
            bbox = err.split('\n')[0].split()
            width = float(bbox[3])
            height = float(bbox[4])
        else:
            raise ValueError('Unknown figure method "%s"' % opts.figs)

        #if fig_line_no not in figs:
        #    figs[fig_line_no] = (fig_i, two_column, [(width, height, newline, filename)])
        #else:
        #    figs[fig_line_no][2].append((width, height, newline, filename))

        aspect = float(width/height)
            
        if two_column:
            words_equiv = 300./(0.5*aspect) + 40.
        else:
            words_equiv = 150./aspect + 20.
        
        print 'Figure %d:   %6d words (%.0fx%.0f aspect %.2f, %s)' % (fig_i+1, int(words_equiv),
                                                                      width, height,
                                                                      aspect, filename)
        fig_words.append(words_equiv)
            
    return sum(fig_words)

def process(tex_file, opts):
    print 'Processing TeX file: %s\n' % tex_file
    detex = subprocess.Popen(['detex', '-e', opts.env, tex_file],
                             stdout=subprocess.PIPE)
    out, err = detex.communicate()
    detex_lines = out.strip().split('\n')

    tex_lines = open(tex_file).readlines()

    main_text_words = count_main_text_words(detex_lines, tex_lines)
    eqn_words = count_equations_words(tex_lines)
    fig_words = count_figures_words(detex_lines, tex_lines, opts)
    table_words = count_tables_words(tex_lines)
    total_words = (main_text_words + eqn_words + fig_words + table_words)

    print
    print 'Main text:      %6d words' % main_text_words
    print 'Displayed Math: %6d words' % eqn_words
    print 'Figures:        %6d words' % fig_words
    print 'Tables:         %6d words' % table_words
    print 'TOTAL:          %6d words' % total_words
    print
    wl = word_limit[opts.journal]
    if total_words > wl:
        over_under = 'OVER'
    else:
        over_under = 'UNDER'
    print ('Manuscript %s is currently %d words (%.0f%%) %s limit of %d words for journal %s' %
           (tex_file, abs(total_words - wl),
            float(total_words - wl)/wl*100., over_under,
            wl, opts.journal))


parser = optparse.OptionParser(usage='%prog [options] tex-files',
                               description="""
Count length of an APS manuscript formatted in LaTeX, following
guidelines described at http://journals.aps.org/authors/length-guide""")

parser.add_option('-v', '--var', metavar='key value', nargs=2, action='append',
                help='Define TeX variables e.g. to specify location of figure files.')
parser.add_option('-e', '--env', metavar='env1,env2,...',
                help='Comma-separated list of LaTeX environments to ignore.',
                default='abstract,acknowledgements,displaymath,equation,eqnarray')
parser.add_option('-f', '--figs', metavar='(identify | gs)',
                  help='''Tool to use to extract bounding box from figure.
                  Default is gs, ImageMagick identify also supported.''',
                  default='gs')
parser.add_option('-j', '--journal', metavar='PRL', default='PRL',
                  help='Journal abbreviation (e.g. PRL, PRB-RC)')

           
opts, args = parser.parse_args()

for tex_file in args:
    process(tex_file, opts)
